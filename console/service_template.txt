package {{nameS}}

func (s *{{capitalNameS}}Service) Find(id int) (*{{capitalName}}Record, error) {
	result, err := s.repository.Fetch(id)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{capitalNameS}}Service) FindAll() (*[]{{capitalName}}Record, error) {
	result, err := s.repository.FetchAll()
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{capitalNameS}}Service) FindPage(page int, limit int) (*[]{{capitalName}}Record, error) {
	result, err := s.repository.FetchPage(page, limit)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{capitalNameS}}Service) Save(data *{{capitalName}}Record) (*{{capitalName}}Record, error) {
	result, err := s.repository.Update(data)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{capitalNameS}}Service) Create(data *{{capitalName}}Record) (*{{capitalName}}Record, error) {
	result, err := s.repository.Insert(data)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{capitalNameS}}Service) Remove(id int) error {
	err := s.repository.Delete(id)
	if err != nil {
		return err
	}
	return nil
}